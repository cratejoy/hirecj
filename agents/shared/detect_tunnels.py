#!/usr/bin/env python3
"""Detect all running ngrok tunnels and write .env.tunnel files for each service."""

import json
import time
import httpx
import sys
from pathlib import Path
from typing import Dict, Optional

# Service to port mapping
SERVICES = {
    "homepage": 3456,
    "auth": 8103,
    "agents": 8000,
    "database": 8002,
    "knowledge": 8001,
}

def get_tunnels() -> Dict[int, str]:
    """Get all tunnels indexed by local port."""
    try:
        response = httpx.get("http://localhost:4040/api/tunnels", timeout=2.0)
        if response.status_code == 200:
            data = response.json()
            tunnels = {}
            
            for tunnel in data.get("tunnels", []):
                if tunnel.get("proto") == "https":
                    # Extract port from config
                    addr = tunnel.get("config", {}).get("addr", "")
                    if ":" in addr:
                        port = int(addr.split(":")[-1])
                        tunnels[port] = tunnel.get("public_url")
            
            return tunnels
    except Exception as e:
        print(f"‚ùå Error fetching tunnels: {e}", file=sys.stderr)
    
    return {}

def write_root_tunnel_env(tunnels: Dict[int, str]):
    """Write all tunnel URLs to root .env.tunnel file."""
    env_file = Path(".env.tunnel")
    
    with open(env_file, "w") as f:
        f.write("# Auto-generated by tunnel detector\n")
        f.write("# This file is gitignored and regenerated on each run\n")
        f.write("# DO NOT EDIT - will be overwritten\n\n")
        
        # Write service URLs that replace the defaults
        for service, port in SERVICES.items():
            if port in tunnels:
                tunnel_url = tunnels[port]
                # Write the standard service URL
                f.write(f"{service.upper()}_SERVICE_URL={tunnel_url}\n")
        
        f.write("\n# Additional service-specific URLs\n")
        
        # Auth service needs OAuth redirect URL
        if SERVICES["auth"] in tunnels:
            f.write(f"OAUTH_REDIRECT_BASE_URL={tunnels[SERVICES['auth']]}\n")
        
        # Homepage needs its URL for Vite
        if SERVICES["homepage"] in tunnels:
            f.write(f"HOMEPAGE_URL={tunnels[SERVICES['homepage']]}\n")
            f.write(f"VITE_PUBLIC_URL={tunnels[SERVICES['homepage']]}\n")
        
        # Generic PUBLIC_URL for any service that needs it
        # Use the agents service URL as the default public URL
        if SERVICES["agents"] in tunnels:
            f.write(f"\n# Default public URL (agents service)\n")
            f.write(f"PUBLIC_URL={tunnels[SERVICES['agents']]}\n")

def main():
    """Detect and configure all service tunnels."""
    print("üîç Detecting ngrok tunnels...", file=sys.stderr)
    
    # Wait for ngrok to start
    for attempt in range(10):
        tunnels = get_tunnels()
        if tunnels:
            break
        time.sleep(1)
    
    if not tunnels:
        print("‚ùå No tunnels detected", file=sys.stderr)
        return 1
    
    # Write root .env.tunnel with all service URLs
    write_root_tunnel_env(tunnels)
    
    # Display configured services
    configured = []
    for service, port in SERVICES.items():
        if port in tunnels:
            tunnel_url = tunnels[port]
            configured.append(f"  {service}: {tunnel_url}")
            print(f"‚úÖ {service}: {tunnel_url}", file=sys.stderr)
    
    print("\nüìã Summary:", file=sys.stderr)
    print("\n".join(configured), file=sys.stderr)
    
    # Also print a nice formatted table
    print("\nüåê Service URLs:", file=sys.stderr)
    print("-" * 60, file=sys.stderr)
    for service, port in SERVICES.items():
        if port in tunnels:
            print(f"{service:<12} ‚Üí {tunnels[port]}", file=sys.stderr)
    print("-" * 60, file=sys.stderr)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())