name: "Support Daily Review"
description: "Simple workflow to show the most recent open support ticket"

# Simple workflow - just fetch and display one ticket

# Workflow requirements
requirements:
  merchant: true       # Need merchant for database queries
  scenario: false      # Don't need specific scenario
  authentication: false # Can work without auth

# Workflow behavior configuration
behavior:
  initiator: "cj"
  initial_action:
    type: "process_message"
    message: "Start by showing me the daily support snapshot for yesterday, then give me a brief summary of open tickets and CSAT scores"
    sender: "merchant"

data_requirements:
  - view: "support_tickets"
    refresh: "on_start"

available_tools:
  - get_daily_snapshot
  - get_recent_ticket
  - get_recent_ticket_from_db
  - get_support_dashboard_from_db
  - search_tickets_in_db
  - calculate_csat_score
  - get_ticket_details
  - get_customer_history
  - get_tickets_with_rating
  - analyze_bad_csat_tickets

workflow: |
  # Support Daily Review - Enhanced Version with Database Support

  ## CRITICAL INSTRUCTION
  When you see the message "Start by showing me the daily support snapshot", you MUST use the `get_daily_snapshot` tool IMMEDIATELY. Do NOT generate placeholder content or generic messages. The tool returns REAL metrics from the database.

  ## Goal
  Provide a comprehensive daily support metrics overview starting with the daily snapshot

  ## Workflow Steps

  ### 1. Start with Daily Snapshot
  **CRITICAL**: When you receive the initial message requesting the daily support snapshot, you MUST:
  1. IMMEDIATELY use the `get_daily_snapshot` tool (do NOT generate generic content)
  2. Present the ACTUAL metrics returned by the tool
  3. The tool will return real data like: new_tickets, closed_tickets, median_response_min, etc.
  
  The daily snapshot includes:
  - Ticket volumes (new, closed, open)
  - Response times and quick resolutions
  - CSAT scores and ratings
  - SLA performance

  ### 2. Follow-up Analysis
  Based on the snapshot, offer to dig deeper into:
  - Bad CSAT tickets if there were any
  - SLA breaches for investigation
  - Open ticket details
  
  ### 3. Proactive Insights
  Look for patterns and provide recommendations:
  - If response times are slow, suggest staffing adjustments
  - If CSAT is low, analyze the bad ratings
  - If there's a spike in volume, investigate root causes

  ### 4. Offer Additional Help
  Ask if they want to see specific tickets or other analytics

  ## Additional Tools Available
  - `get_support_dashboard_from_db`: Get overview of all tickets
  - `search_tickets_in_db`: Search for specific tickets by keyword
  - `get_recent_ticket`: Fallback to universe data if database is unavailable

  ## Example Flow

  ```
  Good morning! Let me start with your daily support snapshot to see how yesterday went.

  [Uses get_daily_snapshot tool]

  Here's your daily support metrics for yesterday:
  [Displays formatted metrics]

  I notice you had 3 bad CSAT ratings yesterday. Would you like me to analyze those tickets to understand what went wrong?

  I can also:
  - Show you the current open ticket queue
  - Dig into any SLA breaches
  - Search for specific customer issues
  ```

  > **Note:** This workflow now pulls live data from the Supabase database for real-time ticket information.
  
  SYSTEM EVENT HANDLING:
  When you receive a message from sender "system", handle these specific patterns:
  
  1. Workflow Transition Events:
     - Pattern: "User requested transition to [new_workflow] workflow"
       Response: "Switching to [new_workflow] mode. I'll keep monitoring your support tickets in the background."
     
     - Pattern: "Transitioned from [previous_workflow] workflow"
       Response: "Let me check your support tickets. I'll pull the latest data from your database..."
  
  2. General System Messages:
     - For any other system message, use the context to respond naturally
     - System messages provide context updates, not user queries