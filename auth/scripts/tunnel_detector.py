#!/usr/bin/env python3
"""Detect running ngrok tunnel and extract public URL."""

import json
import time
import httpx
import sys
from typing import Optional


def get_tunnel_url(max_retries: int = 10, retry_delay: float = 1.0) -> Optional[str]:
    """
    Get the public URL of the running ngrok tunnel.
    
    Args:
        max_retries: Maximum number of attempts
        retry_delay: Delay between retries in seconds
        
    Returns:
        The public URL if found, None otherwise
    """
    ngrok_api_url = "http://localhost:4040/api/tunnels"
    
    for attempt in range(max_retries):
        try:
            response = httpx.get(ngrok_api_url, timeout=2.0)
            if response.status_code == 200:
                data = response.json()
                tunnels = data.get("tunnels", [])
                
                # Find HTTPS tunnel
                for tunnel in tunnels:
                    if tunnel.get("proto") == "https":
                        return tunnel.get("public_url")
                
                # Fallback to HTTP if no HTTPS
                for tunnel in tunnels:
                    if tunnel.get("proto") == "http":
                        url = tunnel.get("public_url")
                        # Convert to HTTPS
                        return url.replace("http://", "https://") if url else None
        
        except (httpx.RequestError, json.JSONDecodeError):
            if attempt < max_retries - 1:
                time.sleep(retry_delay)
                continue
    
    return None


def write_tunnel_env(tunnel_url: str, env_file: str = ".env.tunnel"):
    """Write tunnel URL to environment file."""
    with open(env_file, "w") as f:
        f.write(f"# Auto-generated by tunnel detector\n")
        f.write(f"# This file is gitignored and regenerated on each run\n")
        f.write(f"TUNNEL_URL={tunnel_url}\n")
        f.write(f"OAUTH_REDIRECT_BASE_URL={tunnel_url}\n")


def main():
    """Main function."""
    print("🔍 Detecting ngrok tunnel...", file=sys.stderr)
    
    tunnel_url = get_tunnel_url()
    
    if tunnel_url:
        print(f"✅ Tunnel detected: {tunnel_url}", file=sys.stderr)
        write_tunnel_env(tunnel_url)
        print(tunnel_url)  # Output for scripts
        return 0
    else:
        print("❌ No tunnel detected", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(main())